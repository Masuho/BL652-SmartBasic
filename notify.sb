#define ADXL312_ADDR			   0x1DU
#define ADXL312_DEVID_REG          0x00U
#define ADXL312_OFSX_REG           0x1E
#define ADXL312_OFSY_REG           0x1F
#define ADXL312_OFSZ_REG           0x20
#define ADXL312_THRESH_ACT_REG     0x24
#define ADXL312_THRESH_INACT_REG   0x25
#define ADXL312_TIME_INACT_REG     0x26
#define ADXL312_ACT_INACT_CTL_REG  0x27
#define ADXL312_BW_RATE_REG        0x2C
#define ADXL312_POWER_CTL_REG      0x2D
#define ADXL312_INT_ENABLE_REG     0x2E
#define ADXL312_INT_MAP_REG        0x2F
#define ADXL312_INT_SOURCE_REG     0x30
#define ADXL312_DATA_FORMAT_REG    0x31
#define ADXL312_DATAX0_REG         0x32
#define ADXL312_DATAX1_REG         0x33
#define ADXL312_DATAY0_REG         0x34
#define ADXL312_DATAY1_REG         0x35
#define ADXL312_DATAZ0_REG         0x36
#define ADXL312_DATAZ1_REG         0x37
#define ADXL312_FIFO_CTL           0x38
#define ADXL312_FIFO_STATUS        0x39

//Data rate codes.
#define ADXL312_3200HZ      0x0F
#define ADXL312_1600HZ      0x0E
#define ADXL312_800HZ       0x0D
#define ADXL312_400HZ       0x0C
#define ADXL312_200HZ       0x0B
#define ADXL312_100HZ       0x0A
#define ADXL312_50HZ        0x09
#define ADXL312_25HZ        0x08
#define ADXL312_12HZ5       0x07
#define ADXL312_6HZ25       0x06

#define ADXL312_ID          0x1D
#define ADXL312_I2C_READ    0x3B
#define ADXL312_I2C_WRITE   0x3A
#define ADXL312_MULTI_BYTE  0x60

#define ADXL312_X           0x00
#define ADXL312_Y           0x01
#define ADXL312_Z           0x02
//Example :: BleCharValueNotify.sb
dim hMyChar, rc, at$, conHndl, cnt
dim handle, nslaveAddr, nRegAddr, nRegVal
dim result[3] as integer
dim connectFlag: connectFlag=0

function HandlerTimer0()
	dim buff$
	if connectFlag==1 then
		nRegAddr = ADXL312_DATAX0_REG
		rc = I2cReadReg16(nSlaveAddr, nRegAddr, nRegVal)
		result[0]=nRegVal
		nRegAddr = ADXL312_DATAY0_REG
		rc = I2cReadReg16(nSlaveAddr, nRegAddr, nRegVal)
		result[1]=nRegVal
		nRegAddr = ADXL312_DATAZ0_REG
		rc = I2cReadReg16(nSlaveAddr, nRegAddr, nRegVal)
		result[2]=nRegVal
		//result[0]=result[0]*29/1000
		//result[1]=result[1]*29/1000
		//result[2]=result[2]*29/1000
		//result[0]=100
		//result[1]=200
		//result[2]=-300
	
		print"\nx:";result[0];" y:";result[1];" z:";result[2];
	
		rc=BleEncode16(buff$,result[0],0)
		rc=BleEncode16(buff$,result[1],2)
		rc=BleEncode16(buff$,result[2],4)
	
		if BleCharValueNotify(hMyChar,buff$)!=0 then
			print "\nFailed to notify new value :";INTEGER.H'rc
		else
			print "\nSuccessful notification of new value"              
			exitfunc 1
		endif
	endif
	
endfunc 1

function initAdxl312()
	//--- Open I2C Peripheral
	rc=I2cOpen(100000,0,handle)
	if rc!= 0 then
		print "\nFailed to open I2C interface with error code "; integer.h' rc
	else
		print "\nI2C open success"
	endif

	nSlaveAddr=0x1D :  nRegAddr = ADXL312_POWER_CTL_REG : nRegVal = 0x00
	rc = I2cWriteReg8(nSlaveAddr, nRegAddr, nRegVal)
	if rc!= 0 then
		print "\nFailed to Write to slave/register "; integer.h'rc
	else
		print "\n";nRegVal; " written successfully to register ";nRegAddr
	endif

	nRegAddr = ADXL312_DATA_FORMAT_REG : nRegVal = 0x00
	rc = I2cWriteReg8(nSlaveAddr, nRegAddr, nRegVal)
	if rc!= 0 then
		print "\nFailed to Write to slave/register "; integer.h'rc
	else
		print "\n";nRegVal; " written successfully to register ";nRegAddr
	endif

	nRegAddr = ADXL312_POWER_CTL_REG : nRegVal = 0x08
	rc = I2cWriteReg8(nSlaveAddr, nRegAddr, nRegVal)
	if rc!= 0 then
		print "\nFailed to Write to slave/register "; integer.h'rc
	else
		print "\n";nRegVal; " written successfully to register ";nRegAddr
	endif
endfunc rc


//==============================================================================
// Initialise and instantiate service, characteristic, start adverts
//==============================================================================
function OnStartup()
    dim rc, hSvc, at$, attr$, adRpt$, addr$, scRpt$  
    attr$="start"
    dim mdCccd : mdCccd = BleAttrMetadata(1,1,2,0,rc)   //CCCD metadata for char
    rc=BleTxPowerSet(-20)
    //Commit svc with handle 'hSvcUuid'
	rc=BleServiceNew(1, BleHandleUuid16(0x18EE), hSvc)
    //initialise char, write/read enabled, accept signed writes, notifiable
    rc=BleCharNew(0x12,BleHandleUuid16(1),BleAttrMetaData(1,0,20,0,rc),mdCccd,0)     
    //commit char initialised above, with initial value "hi" to service 'hMyChar'
    rc=BleCharCommit(hSvc,attr$,hMyChar)
	//commit changes to service
	rc=BleServiceCommit(hSvc)
    rc=BleScanRptInit(scRpt$) 
    //Add 1 service handle to scan report
    rc=BleAdvRptAddUuid16(scRpt$,0x18EE,-1,-1,-1,-1,-1)
    //commit reports to GATT table - adRpt$ is empty
    rc=BleAdvRptsCommit(adRpt$,scRpt$)
    rc=BleAdvertStart(0,addr$,100,0,0)
endfunc rc

//==============================================================================
// Ble event handler
//==============================================================================
function HndlrBleMsg(byval nMsgId, byval nCtx)
	dim rc, addr$
    conHndl=nCtx
    if nMsgId==1 then
		connectFlag=0
        print "\n\n--- Disconnected from client"
		rc=BleAdvertStart(0,addr$,50,0,0)
		print "\n--- Restart Advertising"
        //EXITFUNC 0
    elseif nMsgId==0 then
		//connectFlag=1
        print "\n--- Connected to client"
    endif
endfunc 1
//==============================================================================
// This handler is called when an advertisment has timed out
//==============================================================================
function HandlerBlrAdvTimOut() as integer
    
	print "\nAdvert stopped via timeout"
	
endfunc 1
//==============================================================================
// CCCD descriptor written handler
//==============================================================================
function HndlrCharCccd(byval charHandle, byval nVal) as integer
    dim value$, rc

	if charHandle==hMyChar then
        print "\nCCCD Val: ";nVal
        if nVal then
			connectFlag=1
            print " : Notifications have been enabled by client"
			//value$="hello"
            //if BleCharValueNotify(hMyChar,value$)!=0 then
            //    print "\nFailed to notify new value :";INTEGER.H'rc
            //else
            //    print "\nSuccessful notification of new value"              
            //    exitfunc 1
            //endif
        else
			connectFlag=0
            print " : Notifications have been disabled by client"
        endif
    else
        print "\nThis is for some other characteristic"
    endif
endfunc 1

//----------------------------------------------------------------------------
OnEvent  EVBLEMSG			call HndlrBleMsg
OnEvent  EVCHARCCCD			call HndlrCharCccd
OnEvent  EVBLE_ADV_TIMEOUT  call HandlerBlrAdvTimOut
OnEvent	 EVTMR0 			call HandlerTimer0

//--- main -------------------------------------------------------------------
rc = initAdxl312()

if OnStartup()==0 then
    rc = BleCharValueRead(hMyChar,at$)
    print "\nCharacteristic Value: ";at$
    print "\nYou can connect and write to the CCCD characteristic."
    print "\nThe BL652 will then notify your device of a new characteristic value\n"
else
    print "\nFailure OnStartup"
endif

TimerStart(0,100,1)
print "";SysInfo(2008)
WaitEvent
